package Travolta;


import com.codename1.io.ConnectionRequest;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.FlowLayout;
import com.travolta.gui.AdminForm;
import com.travolta.gui.SignUpForm;
import com.travolta.gui.addUser;
import com.travolta.utils.Statics;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication  {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
      public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Login", new FlowLayout(CENTER, CENTER));
        Container cnt = new Container(BoxLayout.y());
        TextField adresse = new TextField("", "adresse");
        TextField mdp = new TextField("", "mdp");
         mdp.setConstraint(TextField.PASSWORD);
         Button bt = new Button("Connect");
          Button btnInscri = new Button("inscrivez-vous ! ");
        
        btnInscri.addActionListener(e-> new SignUpForm().show());
         cnt.addAll(adresse,mdp,bt, btnInscri);
         hi.add(cnt);
         Form f2 = new Form("test");
         Label lb = new Label();
         f2.add(lb);
         bt.addActionListener(l->{
             String url = Statics.BASE_URL + "/utilisateur/signIn";
             ConnectionRequest con = new ConnectionRequest();
             con.setUrl(url);
             con.setPost(false);
             con.addArgument("adresse", adresse.getText());
             con.addArgument("mdp", mdp.getText());
             con.addResponseListener(aa->{
                 String reponse=new String (con.getResponseData());
                 System.out.println(reponse);
                 
                 if(con.getResponseCode() == 200){
                    bt.addActionListener(e-> new AdminForm().show());
                 }else{
                 Dialog.show("Error", "Login et PWD invalide", "OK","Cancel");
                 }
             });
             NetworkManager.getInstance().addToQueueAndWait(con);
         });
       /// hi.add(new Label("Hi World"));
        hi.show();
        
       

    }


    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
